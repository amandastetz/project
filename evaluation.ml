(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    let lookup (env : env) (varname : varid) : value =
      try 
        !(List.assoc varname env)
      with Not_found -> raise (EvalError "Not Found")
      ;;

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      try 
        let _v = lookup env varname in 
        List.map (fun (var_name, var_value) -> 
        if var_name = varname then (var_name, loc)
        else (var_name, var_value)) env
      with Not_found -> (varname, loc) :: env 
      ;;

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val e -> exp_to_concrete_string e
      | Closure (ex, en) -> if printenvp then exp_to_concrete_string ex ^
                              " environment: " ^ env_to_string en
                              else exp_to_concrete_string ex 
    and env_to_string (env : env) : string =
      match env with
      | [] -> ""
      | (var_id, val_ref) :: [] -> var_id ^ " = " ^ value_to_string !val_ref
      | (var_id, val_ref) :: tl -> var_id ^ " = " ^ value_to_string !val_ref ^
                                   ", " ^ env_to_string tl
      ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* Coerces the value, unchanged, into an expr *)
let make_expr (v : Env.value) : expr = 
  match v with
  | Env.Val v -> v
  | Env.Closure (_, _) -> raise (EvalError "Cannot make expr of closure")
  ;;

(* Int factorial function *)
let rec fac (x : int) : int = 
  if x <= 1 then 1 else x * fac (x - 1) ;;
(* Float factorial function *)
let rec fl_fac (x : float) : float = 
  if x <= 1. then 1. else x *. fl_fac (x -. 1.) ;;

(* Unop evaluator *)
let u_eval (u : unop) (exp : expr) : Env.value =
   match u, exp with
    (* Acceptable negate matches *)   
    | Negate, Num n   -> Env.Val (Num (~- n))
    | Negate, Float f -> Env.Val (Float (~-. f))
    | Negate, _       -> raise (EvalError "Must be type int or float")
    (* Acceptable fact matches *)   
    | Fact, Num n     -> Env.Val (Num (fac n))
    | Fact, Float n   -> Env.Val (Float (fl_fac n))
    | Fact, _         -> raise (EvalError "Must be type int or float")
;;

(* Binop evaluator *)
let bin_eval (b : binop) (e1 : expr) (e2 : expr) : Env.value = 
  match b, e1, e2 with
  (* Acceptable plus matches *)
  | Plus, Num x, Num y     -> Env.Val (Num (x + y))
  | Plus, Float x, Float y -> Env.Val (Float (x +. y))
  | Plus, _, _             -> raise (EvalError "Must be type int or float")
  (* Acceptable minus matches *)
  | Minus, Num x, Num y     -> Env.Val (Num (x - y))
  | Minus, Float x, Float y -> Env.Val (Float (x -. y))
  | Minus, _, _             -> raise (EvalError "Must be type int or float")
  (* Acceptable times matches *)
  | Times, Num x, Num y     -> Env.Val (Num (x * y))
  | Times, Float x, Float y -> Env.Val (Float (x *. y))
  | Times, _, _             -> raise (EvalError "Must be type int or float")
  (* Acceptable divide matches *)
  | Divide, Num x, Num y     -> Env.Val (Num (x / y))
  | Divide, Float x, Float y -> Env.Val (Float (x /. y))
  | Divide, _, _             -> raise (EvalError "Must be type int or float")
  (* Acceptable mod matches *)
  | Mod, Num x, Num y -> Env.Val (Num (x mod y))
  | Mod, _, _         -> raise (EvalError "Must be type int")
  (* Acceptable exponent matches *)
  | Exponent, Float x, Float y -> Env.Val (Float (x ** y))
  | Exponent, _, _             -> raise (EvalError "Must be type float")
  (* Acceptable lessthan matches *)
  | LessThan, Num x, Num y     -> Env.Val (Bool (x < y))
  | LessThan, Float x, Float y -> Env.Val (Bool (x < y))
  | LessThan, _, _             -> raise (EvalError "Unable to be compared")
  (* Acceptable greaterthan matches *)
  | GreaterThan, Num x, Num y     -> Env.Val (Bool (x > y))
  | GreaterThan, Float x, Float y -> Env.Val (Bool (x > y))
  | GreaterThan, _, _             -> raise (EvalError "Unable to be compared")
  (* Acceptable equals matches *)
  | Equals, Num x, Num y     -> Env.Val (Bool (x = y))
  | Equals, Float x, Float y -> Env.Val (Bool (x = y))
  | Equals, Bool x, Bool y   -> Env.Val (Bool (x = y))
  | Equals, Str x, Str y     -> Env.Val (Bool (x = y))
  | Equals, _, _             -> raise (EvalError "Unable to be compared")
;; 

(* The SUBSTITUTION MODEL evaluator -- to be completed *) 

let eval_s (_exp : expr) (_env : Env.env) : Env.value =
  let rec eval2 (ex : expr) : Env.value =
    match ex with
    | Var _ -> raise (EvalError "Unbound Variable")                
    | Num _ | Float _ | Bool _ | Str _ | Unassigned -> Env.Val ex                                                
    | Unop (u, e) -> u_eval u (make_expr(eval2 e))                
    | Binop (b, e1, e2) -> bin_eval b (make_expr(eval2 e1)) 
                                      (make_expr(eval2 e2))    
    | Conditional (e1, e2, e3) -> if (eval2 e1 = Env.Val (Bool true)) 
                                  then eval2 e2 
                                  else eval2 e3
    | Fun (v, e) -> Env.Val (Fun (v, e))
    | Let (v, e1, e2) -> eval2 (subst v (make_expr(eval2 e1)) e2)        
    | Letrec (v, e1, e2) -> eval2 (subst v (subst v 
                            (Letrec (v, e1, Var v)) e1) e2)  
    | Raise -> raise EvalException          
    | App (e1, e2) -> match eval2 e1 with 
                      | Env.Val Fun (v, e3) -> 
                        eval2 (subst v (make_expr(eval2 e2)) e3)
                      | _ -> raise (EvalError "Bad Redex")
  in
  eval2 _exp ;; 
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let eval_d (_exp : expr) (_env : Env.env) : Env.value =
  let rec eval_d2 (_exp : expr) (_env : Env.env) : Env.value =
    match _exp with 
    | Var v -> (try 
                 Env.lookup _env v 
               with Not_found -> raise (EvalError "Unbound Variable"))
    | Num _ | Float _ | Bool _ | Str _ | Unassigned -> Env.Val _exp
    | Unop (u, e) -> u_eval u (make_expr(eval_d2 e _env)) 
    | Binop (b, e1, e2) -> bin_eval b (make_expr(eval_d2 e1 _env)) 
                                      (make_expr(eval_d2 e2 _env))
    | Conditional (e1, e2, e3) -> if (eval_d2 e1 _env = Env.Val (Bool true)) 
                                  then eval_d2 e2 _env 
                                  else eval_d2 e3 _env
    | Fun (v, e) -> Env.Val (Fun (v, e))
    | Let (v, edef, ebody) -> let new_value = ref (eval_d2 edef _env) in 
                                eval_d2 ebody (Env.extend _env v new_value) 
    | Letrec (v, edef, ebody) -> let new_value = ref (Env.Val Unassigned) in
                                 let new_envir = Env.extend _env v new_value in
                                 let newest_value = eval_d2 edef new_envir in
                                  new_value := newest_value;
                                  eval_d2 ebody new_envir
    | Raise -> raise EvalException
    | App (func, ap) -> let func2 = eval_d2 func _env in
                        let ap2 = ref (eval_d2 ap _env) in
                        (match func2 with
                        | Env.Val (Fun (x, b)) -> eval_d2 b 
                                                  (Env.extend _env x ap2)
                        | _ -> raise (EvalError "Non-function"))    
  in eval_d2 _exp _env
;;
     

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
  
let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  failwith "eval_l not implemented" ;; 

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, evaluate is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_s ;;
